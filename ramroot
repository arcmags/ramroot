#!/bin/bash
##==============================  ramroot  ===============================##
# Copyright (C) 2018 Chris Magyar            GNU General Public License v3 #
##========================================================================##
version="1.1.7"

print_help() {
cat <<'HELPDOC'
NAME
    ramroot - load root (and /boot) filesystem entirely to RAM during boot

SYNOPSIS
    ramroot <ACTION> [OPTIONS]

ACTIONS
    disable
        Remove ramroot from /etc/mkinitcpio.conf HOOKS.
        Remove ext4, vfat, and zram from /etc/mkinitcpio.conf MODULES.
        Rebuild linux cpio boot image.

    enable
        Rebuild  build and runtime hooks in /usr/lib/initcpio.
        Add ramroot to /etc/mkinitcpio.conf HOOKS.
        Add ext4, vfat, and zram to /etc/mkinitcpio.conf MODULES.
        Rebuild linux cpio boot image.

    remove
        Disable ramroot.
        Remove build and runtime hooks from /usr/lib/initcpio.

    status
        Print ramroot and root filesystem status to screen.
        Return exit status 0 if enabled and currently loaded to RAM.
        Return exit status 1 if enabled and not loaded RAM.
        Return exit status 2 if disabled.

OPTIONS
    -b, --boot <UUID>
        Specify /boot partition UUID to use when building hooks.

    -D, --dryrun
        Execute ACTION without making any changes.

    -F, --fstab
        Mount all other partitions in /etc/fstab normally.

    -H, --help
        Display help text and exit.

    -K, --keep
        Keep copies of new build and runtime hooks in ~/.cache/ramroot.

    -M, --message
        Print 'Arch on RAM' message at tty login by using custom /etc/issue.

    -N, --no
        Change startup prompt default to not load filesystem to RAM.

    -r, --root <UUID>
        Specify root partition UUID to use when building hooks.

    -t, --timeout <SECONDS>
        Set RAM boot prompt timeout (default=15).
HELPDOC
return 0
}


##=============================  VARIABLES  ==============================##
# default variables:
dirCache="$HOME/.cache/ramroot"
dirBuild='/tmp/ramroot'
keepBuildFiles='false'
promptTimeoutDefault=15
# script variables (do not change):
rootUUID=
bootUUID=
ramrootAction='none'
dirHooks='/usr/lib/initcpio/hooks'
dirInstall='/usr/lib/initcpio/install'
dirLib='/usr/lib/ramroot'
dirScript=
hookBuild="$dirLib/install/ramroot"
hookRuntime="$dirLib/hooks/ramroot"
incognitoMode='false'
initMODULES=
initHOOKS=
issueRAM='false'
exitStatus=0
dryRun='false'
fstabMount='false'
promptTimeout=$promptTimeoutDefault
promptDefault='yes'


##=============================  FUNCTIONS  ==============================##
# Script functions.
##========================  ramroot_enable()  ========================##
# Generate new build and runtime hooks using local UUID of root partition.
# Copy new hooks to /usr/lib/initcpio.
# Add ext4, vfat, and zram to /etc/mkinitcpio.conf MODULES.
# Add ramroot to /etc/mkinitcpio.conf HOOKS.
# Rebuild linux cpio boot image.
ramroot_enable() {
    mkinitChange='false'
    # check for user specified root UUID:
    if [ -n "$rootUUID" ]; then
        printf ":: Using root UUID: $rootUUID\n"
    else
        # FAIL: root not mounted:
        if (! mountpoint / >/dev/null 2>&1); then
            printf ":! Nothing mounted at /.\n"
            exit 1
        fi
        # try to get root UUID from lsblk:
        rootUUID=`lsblk -n -o mountpoint,UUID | \
            grep -Po '(^| +)/ +\K[^ ]+'`
        # try to get root UUID from /etc/fstab:
        if [ -z "$rootUUID" ] && [ -f /etc/fstab ]; then
            rootUUID=`grep -Po 'UUID=\K[^ ]+(?= +/ )' /etc/fstab`
        fi
        # FAIL: unable to determine root UUID:
        if [ -z "$rootUUID" ]; then
            printf ":! Unable to determine root UUID.\n"
            exit 1
        else
            printf ":: Detected root UUID: $rootUUID\n"
        fi
    fi
    # check for user specified /boot UUID:
    if [ -n "$bootUUID" ]; then
        printf ":: Using /boot UUID: $bootUUID\n"
    else
        # check if /boot mounted:
        if (mountpoint /boot >/dev/null 2>&1); then
            # try to get /boot UUID from lsblk:
            bootUUID=`lsblk -n -o mountpoint,UUID | \
                grep -Po '(^| +)/boot +\K[^ ]+'`
            # try to get /boot UUID from /etc/fstab:
            if [ -z "$bootUUID" ] && [ -f /etc/fstab ]; then
                bootUUID=`grep -Po 'UUID=\K[^ ]+(?= +/boot )' /etc/fstab`
            fi
        fi
        if [ -z "$bootUUID" ]; then
            printf ":: No /boot UUID detected.\n"
        else
            printf ":: Detected /boot UUID: $bootUUID\n"
        fi
    fi
    # check for hook files in local git repo:
    if [ -f "$dirScript/lib/hooks/ramroot" ]; then
        hookRuntime="$dirScript/lib/hooks/ramroot"
    fi
    if [ -f "$dirScript/lib/install/ramroot" ]; then
        hookBuild="$dirScript/lib/install/ramroot"
    fi
    # FAIL: unable to find hook files:
    if [ ! -f "$hookBuild" ] || [ ! -f "$hookRuntime" ]; then
        printf ":! Unable to locate hook files.\n"
        exit 1
    fi

    # copy build hook:
    mkdir -p install
    cp "$hookBuild" install/ramroot
    # make runtime hook:
    mkdir -p hooks
    sed "s@rootUUID=.*@rootUUID=\'$rootUUID\'@g; \
        s@bootUUID=.*@bootUUID=\'$bootUUID\'@g; \
        s@promptDefault=.*@promptDefault=\'$promptDefault\'@g; \
        s@promptTimeout=.*@promptTimeout=\'$promptTimeout\'@g;" \
        "$hookRuntime" > hooks/ramroot
    # enable /etc/fstab:
    if [ "$fstabMount" = 'true' ]; then
        sed -i "s@fstabMount='false'@fstabMount=\'true\'@g" hooks/ramroot
    fi
    # enable custom /etc/issue:
    if [ "$issueRAM" = 'true' ]; then
        sed -i "s@issueRAM='false'@issueRAM=\'true\'@g" hooks/ramroot
    fi
    # incognito mode:
    if [ "$incognitoMode" = 'true' ]; then
        sed -i '73i\        echo -e "\\e[0;30m"; clear' hooks/ramroot
        sed -i '114i\        echo -e "\\033[H\\033[2J\\033[0;30m\\033[?1c" \\' \
            hooks/ramroot
        sed -i '115i\            > /zram_root/etc/issue' hooks/ramroot
        sed -i '116i\        chmod +x /zram_root/etc/issue' hooks/ramroot
    fi
    # FAIL: ramroot hooks not built:
    if [ ! -f hooks/ramroot ] || [ ! -f install/ramroot ]; then
        printf ":! ramroot hooks not built.\n"
        exit 1
    fi
    # check for hook changes:
    if (! diff -q install/ramroot "$dirInstall/ramroot" >/dev/null 2>&1) ||
    (! diff -q hooks/ramroot "$dirHooks/ramroot" >/dev/null 2>&1); then
        mkinitChange='true'
    fi

    # add zram to initMODULES:
    if [[ ! "$initMODULES" =~ zram ]]; then
        if [ -z "$initMODULES" ]; then
            initMODULES='zram'
        else
            initMODULES="${initMODULES} zram"
        fi
        printf ":: zram added to mkinitcpio.conf MODULES\n"
        mkinitChange='true'
    fi
    # add ext4 to initMODULES:
    if [[ ! "$initMODULES" =~ ext4 ]]; then
        initMODULES="${initMODULES} ext4"
        printf ":: ext4 added to mkinitcpio.conf MODULES\n"
        mkinitChange='true'
    fi
    # add vfat to initMODULES:
    if [[ ! "$initMODULES" =~ vfat ]]; then
        initMODULES="${initMODULES} vfat"
        printf ":: vfat added to mkinitcpio.conf MODULES\n"
        mkinitChange='true'
    fi
    # add ramroot to initHOOKS:
    if [[ ! "$initHOOKS" =~ ramroot ]]; then
        if [[ ! "$initHOOKS" =~ encrypt ]]; then
            printf ":: encrypt HOOK detected ramroot will execute after encrypt\n"
            initHOOKS="${initHOOKS%encrypt*}encrypt ramroot${initHOOKS#*encrypt}"
        else
            initHOOKS="${initHOOKS%udev*}udev ramroot${initHOOKS#*udev}"
        fi
        printf ":: ramroot added to mkinitcpio.conf HOOKS\n"
        mkinitChange='true'
    fi

    # if changes need to be made:
    if [ "$mkinitChange" = 'true' ] || [ "$dryRun" = 'true' ]; then
        # build new mkinitcpio.conf:
        sed "s@^MODULES=.*@MODULES=($initMODULES)@g; \
            s@^HOOKS=.*@HOOKS=($initHOOKS)@g;" \
            /etc/mkinitcpio.conf > mkinitcpio.conf
        # FAIL: mkinitcpio.conf not built:
        if [ ! -f mkinitcpio.conf ]; then
            printf ":! mkinitcpio.conf not built.\n"
            exit 1
        fi
        # keep build files in cache:
        ramroot_cache
        if [ "$dryRun" = 'false' ]; then
            # copy mkinitcpio.conf to /etc and hooks to /usr/lib/initcpio:
            printf ":: Enabling ramroot...\n"
            sudo cp hooks/ramroot "$dirHooks/ramroot" &&
            sudo cp install/ramroot "$dirInstall/ramroot" &&
            sudo cp mkinitcpio.conf /etc/mkinitcpio.conf &&
            sudo mkinitcpio -p linux &&
            printf ":: ramroot enabled.\n"
        else
            printf ":: ramroot enable dryrun successful.\n"
        fi
    else
        printf ":: ramroot already enabled.\n"
    fi

    return 0
}

##=======================  ramroot_disable()  ========================##
# Remove ext4 and zram from /etc/mkinitcpio.conf MODULES.
# Remove ramroot from /etc/mkinitcpio.conf HOOKS.
# Rebuild linux cpio boot image.
ramroot_disable() {
    mkinitChange='false'
    # remove zram from initMODULES:
    if [[ "$initMODULES" =~ zram ]]; then
        initMODULES=`echo "$initMODULES" | \
            sed -r 's/( zram|zram |zram)//g'`
        printf ":: zram removed from mkinitcpio.conf MODULES\n"
        mkinitChange='true'
    fi
    # remove ext4 from initMODULES:
    if [[ "$initMODULES" =~ ext4 ]]; then
        initMODULES=`echo "$initMODULES" | \
            sed -r 's/( ext4|ext4 |ext4)//g'`
        printf ":: ext4 removed from mkinitcpio.conf MODULES\n"
        mkinitChange='true'
    fi
    # remove vfat from initMODULES:
    if [[ "$initMODULES" =~ vfat ]]; then
        initMODULES=`echo "$initMODULES" | \
            sed -r 's/( vfat|vfat |vfat)//g'`
        printf ":: vfat removed from mkinitcpio.conf MODULES\n"
        mkinitChange='true'
    fi
    # remove ramroot from initHOOKS:
    if [[ "$initHOOKS" =~ ramroot ]]; then
        initHOOKS=`echo "$initHOOKS" | \
            sed -r 's/( ramroot|ramroot |ramroot)//g'`
        printf ":: ramroot removed from mkinitcpio.conf HOOKS\n"
        mkinitChange='true'
    fi

    # if changes need to be made:
    if [ "$mkinitChange" = 'true' ] || [ "$dryRun" = 'true' ]; then
        # keep copy of old mkinitcpio.conf:
        if [ "$keepBuildFiles" = 'true' ]; then
            mkdir -p "$dirCache"
            cp /etc/mkinitcpio.conf "$dirCache/mkinitcpio~.conf"
        fi
        # build new mkinitcpio.conf:
        sed "s@^MODULES=.*@MODULES=($initMODULES)@g; \
            s@^HOOKS=.*@HOOKS=($initHOOKS)@g;" \
            /etc/mkinitcpio.conf > mkinitcpio.conf
        # FAIL: mkinitcpio.conf not built:
        if [ ! -f mkinitcpio.conf ]; then
            printf ":! mkinitcpio.conf not built.\n"
            exit 1
        fi
        # keep build files in cache:
        ramroot_cache
        # copy mkinitcpio.conf to /etc and rebuild linux cpio image:
        if [ "$dryRun" = 'false' ]; then
            printf ":: Disabling ramroot...\n"
            sudo cp mkinitcpio.conf /etc/mkinitcpio.conf &&
            sudo mkinitcpio -p linux &&
            printf ":: ramroot disabled.\n"
        else
            printf ":: ramroot disable dryrun successful.\n"
        fi
    fi

    return 0
}

##========================  ramroot_remove()  ========================##
# Remove ramroot hooks from /usr/lib/initcpio.
ramroot_remove() {
    # check for installed hooks:
    if [ -f /usr/lib/initcpio/hooks/ramroot ] ||
    [ -f /usr/lib/initcpio/install/ramroot ] ||
    [ "$dryRun" = 'true' ]; then
        # keep copy of old hooks:
        if [ "$keepBuildFiles" = 'true' ]; then
            if [ -f /usr/lib/initcpio/hooks/ramroot ]; then
                mkdir -p "$dirCache/hooks"
                cp /usr/lib/initcpio/hooks/ramroot \
                    "$dirCache/hooks/ramroot"
            fi
            if [ -f /usr/lib/initcpio/install/ramroot ]; then
                mkdir -p "$dirCache/install"
                cp /usr/lib/initcpio/install/ramroot \
                    "$dirCache/install/ramroot"
            fi
        fi
        # remove ramroot hooks:
        if [ "$dryRun" = 'false' ]; then
            printf ":: Removing ramroot hooks...\n"
            if [ -f /usr/lib/initcpio/hooks/ramroot ]; then
                sudo rm /usr/lib/initcpio/hooks/ramroot
            fi
            if [ -f /usr/lib/initcpio/install/ramroot ]; then
                sudo rm /usr/lib/initcpio/install/ramroot
            fi
        else
            printf ":: ramroot remove dryrun successful.\n"
        fi
    fi

    return 0
}

##========================  ramroot_status()  ========================##
# Print ramroot installation status to screen.
ramroot_status() {
    # print root filesystem status:
    root_stat() {
        if (lsblk | grep -P 'zram.*?/ ?$' >/dev/null); then
            printf ":: root filesystem loaded to RAM\n"
        else
            printf ":: root filesystem not loaded to RAM\n"
            exitStatus=1
        fi
    }
    if [[ "$initMODULES" =~ zram ]] &&
    [[ "$initMODULES" =~ ext4 ]] &&
    [[ "$initMODULES" =~ vfat ]] &&
    [[ "$initHOOKS" =~ ramroot ]] &&
    [ -f /usr/lib/initcpio/hooks/ramroot ] &&
    [ -f /usr/lib/initcpio/install/ramroot ]; then
        printf ":: ramroot status: enabled\n"
        root_stat
    else
        printf ":: ramroot disabled\n"
        root_stat
        exitStatus=2
    fi

    return 0
}

##========================  helper functions  ========================##
ramroot_cache() {
    if [ "$keepBuildFiles" = 'true' ]; then
        mkdir -p "$dirCache"
        cd "$dirCache"
        cp -r "$dirBuild"/* .
        cd "$dirBuild"
    fi

    return 0
}


##===============================  SCRIPT  ===============================##
# get path of script:
dirScript="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# parse command line arguments:
for arg in "$@"; do case $arg in
    disable)         ramrootAction='disable';    shift;;
    enable)          ramrootAction='enable';     shift;;
    remove)          ramrootAction='remove';     shift;;
    status)          ramrootAction='status';     shift;;
    -b|--boot)       shift; bootUUID="$1";       shift;;
    -D|--dryrun)     dryRun='true';              shift;;
    -F|--fstab)      fstabMount='true';          shift;;
    -H|-h|--help)    ramrootAction='help';       shift;;
    -I|--incognito)  incognitoMode='true';       shift;;
    -K|--keep)       keepBuildFiles='true';      shift;;
    -M|--message)    issueRAM='true';            shift;;
    -N|--no)         promptDefault='no';         shift;;
    -r|--root)       shift; rootUUID="$1";       shift;;
    -t|--timeout)    shift; promptTimeout="$1";  shift;;
esac; done

# print help:
if [ "$ramrootAction" = 'help' ]; then
    print_help
    exit 0
fi

# FAIL: unrecognized option:
if [ -n "$1" ]; then
    printf ":! Unrecognized option: $1\n"
    exit 1
fi

# FAIL: no action specified:
if [ "$ramrootAction" = 'none' ]; then
    printf ":! No action specified.  See --help\n"
    exit 1
fi

# WARN: invalid prompt timeout:
regex='^[1-9][0-9]*$'
if [[ ! "$promptTimeout" =~ $regex ]]; then
    printf ":! Invalid prompt timeout: $promptTimeout\n"
    printf ":: Using default timeout: $promptTimeoutDefault\n"
    promptTimeout=promptTimeoutDefault
fi

# prepare build:
mkdir -p "$dirBuild"
cd "$dirBuild"
sudo -k

# get current MODULES and HOOKS from /etc/mkinitcpio.conf:
initMODULES="`grep -Po '^ *MODULES=(\(|")\K.*?(?=(\)|"))' /etc/mkinitcpio.conf`"
initHOOKS="`grep -Po '^ *HOOKS=(\(|")\K.*?(?=(\)|"))' /etc/mkinitcpio.conf`"

# execute action:
if [ "$ramrootAction" = 'enable' ]; then
    ramroot_enable
elif [ "$ramrootAction" = 'disable' ]; then
    ramroot_disable
elif [ "$ramrootAction" = 'remove' ]; then
    ramroot_disable
    ramroot_remove
elif [ "$ramrootAction" = 'status' ]; then
    ramroot_status
fi

# remove build files:
cd ..
rm -Rd "$dirBuild"

exit $exitStatus
